version: 0.2

env:
  variables:
    MAVEN_OPTS: "-Xmx1024m -Xms512m"
    JAVA_TOOL_OPTIONS: "-Xmx1024m -Xms512m"

phases:
  install:
    runtime-versions:
      java: corretto21
    commands:
      - echo "Environment Information"
      - java -version
      - mvn -version
      - echo "MAVEN_OPTS is $MAVEN_OPTS"

  pre_build:
    commands:
      - echo "Pre-build phase started"
      - pwd
      - echo "Listing top-level entries (max depth 2)"
      - find . -maxdepth 2 -mindepth 1 -printf '%P\n' | sort
      - echo "Checking src directory structure:"
      - find . -path '*/src/main/java' -maxdepth 5 -type f -name "*.java" -print | head -10 || echo "(No java files preview)"
      - echo "Verifying main application class (search)"
      - grep -R "DocOhppApplication" -n . || true
      - echo "Resolving Maven dependencies"
      - mvn dependency:resolve -q

  build:
    commands:
      - echo "Build phase started"
      - mvn clean compile -DskipTests
      - echo "Classes present sample:"
      - find target -type f -name "*.class" | head -10 || true
      - mvn package -DskipTests
      - echo "Post-package target listing (level 1)"
      - find target -maxdepth 1 -printf '%P\n' | sort

  post_build:
    commands:
      - echo "Post-build phase started"
      - echo "Detecting ALL shell scripts anywhere in workspace (excluding target)"
      - SH_FILES=$(find . -type f -name "*.sh" -not -path './target/*')
      - echo "Discovered shell scripts:" && echo "$SH_FILES" | tr ' ' '\n' | sed '/^$/d' || true
      - COUNT=$(echo "$SH_FILES" | tr ' ' '\n' | sed '/^$/d' | wc -l || echo 0)
      - |
        if [ "$COUNT" -eq 0 ]; then
          echo "ERROR: No shell scripts (.sh) found in workspace — failing build" >&2
          exit 1
        fi
      - |
        echo "Normalize line endings and make executable"
        echo "$SH_FILES" | tr ' ' '\n' | sed '/^$/d' | while read f; do
          sed -i 's/\r$//' "$f" || true
          chmod +x "$f" || true
        done
      - echo "Ensuring scripts directory exists" && mkdir -p scripts
      - echo "(Diagnostic) Listing scripts directory" && ls -la scripts || true
      - |
        echo "Creating diagnostic manifest"
        (
          echo "JARs:"
          find target -maxdepth 1 -name '*.jar' -printf '%P\n'
          echo "Scripts:"
          echo "$SH_FILES" | tr ' ' '\n' | sed '/^$/d' | xargs -I{} basename {}
        ) > SCRIPTS_PRESENT.txt
      - echo "Manifest contents:" && cat SCRIPTS_PRESENT.txt || true
      - cp SCRIPTS_PRESENT.txt target/ || true

artifacts:
  files:
    - appspec.yml
    - scripts/*.sh
    - target/*.jar
    - SCRIPTS_PRESENT.txt
  name: DocOhpp-artifact-$(date +%Y-%m-%d-%H-%M-%S)
